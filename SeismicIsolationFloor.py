import numpy as np


# xlsx,csvファイルにしたほうが編集しやすいかも？
# 暫定案です。編集しやすい形にするかな？

# 単位変換:
# sk, c1, c2: *1000
# dmx, dy, vy: /1000


dispb = 100

NRB10 = {
    'k': 7,
    #             600 700 800 900 1000 1100 1200
    'n': np.array([0, 0, 0, 0, 12, 0, 4]),
    'price': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0]),
    'sk1': np.array([0.69, 0.80, 0.91, 1.04, 1.15, 1.26, 1.39]) * 1000,
    'dmx': np.array([480.0, 560.0, 640.0, 720.0, 800.0, 880.0, 960.0]) / 1000,
    'axc': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0]),
    'axt': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0])
}
NRB15 = {
    'k': 7,
    #           600 700 800 900 1000 1200 1400
    'n': np.array([0, 0, 0, 0, 0, 0, 0]),
    'price': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0]),
    'sk1': np.array([1.04, 1.20, 1.37, 1.56, 1.72, 2.08, 2.43]) * 1000,
    'dmx': np.array([480.0, 560.0, 640.0, 720.0, 800.0, 960.0, 1120.0]) / 1000,
    'axc': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0]),
    'axt': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0])
}
LRB = {
    'k': 7,
    #           600 700 800 900 1000 1200 1400
    'n': np.array([0, 0, 0, 0, 0, 0, 0]),
    'price': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0]),
    'sk1': np.array([12.00, 14.00, 16.0, 18.00, 20.00, 24.00, 28.00]) * 1000,
    'dy': np.array([7.500, 8.036, 10.0, 11.250, 12.500, 15.0, 17.5]) / 1000,
    'sk2': np.array([0.92, 1.08, 1.23, 1.39, 1.54, 1.85, 2.16]) * 1000,
    'dmx': np.array([480.0, 560.0, 640.0, 720.0, 800.0, 960.0, 1120.0]) / 1000,
    'axc': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0]),
    'axt': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0]),
    'bdb0': np.zeros(7)
}
SSB = {
    'k': 12,
    #           300 400 500 600 700 800 900
    'n': np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    'price': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0]),
    'sk1': np.array([1.39, 2.31, 3.85, 5.55, 7.56, 9.88, 12.50, 15.42, 18.65, 22.20, 26.05, 30.22]) * 1000,
    'ff': np.array([0.075, 0.075, 0.075, 0.075, 0.075, 0.075, 0.075, 0.075, 0.075, 0.075, 0.075, 0.075]),
    'dmx': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0]) / 1000,
    'axc': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0]),
    'bdb0': np.zeros(12),
    'ax': 9000  # 軸力
}
SD = {  # SD　鋼材U型ダンパー
    'k': 6,
    #       UD45x6  UD45x8  UD50x4  UD50x6  UD55x4  UD55x6
    'n': np.array([0, 0, 0, 0, 0, 0]),
    'price': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0]),
    'sk1': np.array([11.4, 15.2, 8.3, 12.5, 9.6, 14.4]) * 1000,
    'dy': np.array([24.211, 24.211, 27.952, 27.840, 31.667, 31.667]) / 1000,
    'sk2': np.array([0.192, 0.2584, 0.144, 0.216, 0.16, 0.24]) * 1000,
    'dmx': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0]) / 1000,
    'bdb0': np.zeros(6)
}
LD = {  # LD　鉛ダンパー
    'k': 2,
    #       LD180   LD2426
    'n': np.array([0, 0]),
    'price': np.array([999.0, 999.0]),
    'sk1': np.array([12.0, 30.0]) * 1000,
    'dy': np.array([7.500, 7.333]) / 1000,
    'sk2': np.array([0.0, 0.0]) * 1000,
    'dmx': np.array([600.0, 800.0]) / 1000,
    'bdb0': np.zeros(2)
}
OD = {  # OD　免震用オイルダンパー
    'k': 6,
    #  OD125 OD250 OD500 OD1000 OD1500 OD2000
    'n': np.array([6, 0, 0, 0, 0, 0]),
    'price': np.array([999.0, 999.0, 999.0, 999.0, 999.0, 999.0]),
    'c1': np.array([1.25, 3.75, 7.50, 15.00, 22.50, 30.00]) * 1000,
    'c2': np.array([0.085, 0.05, 0.09, 0.18, 0.28, 0.37]) * 1000,  # 320mm/s,
    # 内部ばねの）剛性(kN/mm),
    'vy': np.array([320.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0]) / 1000,
    'sk': np.array([42.9, 42.9, 42.9, 42.9, 42.9, 42.9]) * 1000,
    'dmx': np.array([640.0, 720.0, 800.0, 880.0, 960.0, 1040.0]) / 1000
}


# Get bkb
def get_bkb():
    NRB10['bkb'] = NRB10['n'] @ NRB10['sk1']
    NRB15['bkb'] = NRB15['n'] @ NRB15['sk1']

    LRB['bkb1'] = LRB['n'] * LRB['sk1']
    LRB['bkb2'] = LRB['n'] * LRB['sk2']

    SSB['bkb1'] = SSB['n'] * SSB['sk1']
    SSB['bkb2'] = np.zeros_like(SSB['sk1'])
    SSB['dy'] = SSB['ax'] * SSB['ff'] / SSB['sk1'] / 1000

    SD['bkb1'] = SD['n'] * SD['sk1']
    SD['bkb2'] = SD['n'] * SD['sk2']

    LD['bkb1'] = LD['n'] * LD['sk1']
    LD['bkb2'] = LD['n'] * LD['sk2']


def get_kb(dispb=dispb):   # 免震層の瞬間剛性を算出
    global LRB, SSB, SD, LD
    get_bkb()
    kb = 0
    kb += NRB10['bkb']
    kb += NRB15['bkb']
    kb += get_Kbarr(LRB, dispb)
    kb += get_Kbarr(SSB, dispb)
    kb += get_Kbarr(SD, dispb)
    kb += get_Kbarr(LD, dispb)
    return kb

def get_kb_OD():
    pass


def get_Kbarr(device: dict, dispb=dispb):
    """ バイリニアの個々のデバイスの瞬間剛性を作成するプログラム
        変数の名前はもっとわかりやすくするかな？ """
    kb = 0
    for i in range(device['k']):
        if abs(dispb - device['bdb0'][i]) <= device['dy'][i]:
            kb += device['bkb1'][i]
        else:
            kb += device['bkb2'][i]
            if dispb >= device['bdb0'][i]:
                device['bdb0'][i] = dispb - device['dy'][i]
            else:
                device['bdb0'][i] = dispb + device['dy'][i]
    return kb


print(get_kb())